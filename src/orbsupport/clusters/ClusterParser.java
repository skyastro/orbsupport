package orbsupport.clusters;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;

/**
 * This class reads a file generated by downloading the HEASARC version of the 
 * Abell ZCAT catalog in the pure text format and transforms
 * it into the JSON format used in E&IB.
 * @author Tom
 */
public class ClusterParser {
    class Abell {
        Integer rich;
        Integer count;
        String  atype;
        String  bmtype;
    }
    
    public static void main(String[] args) throws Exception {
        String output = "outputs/clusters.json";
        if (args.length == 1) {
            output = args[0];
        } else if (args.length > 0) {
            System.out.println("Usage:\n  ClusterParser output  \n");
            return;
        }
        new ClusterParser(output).parse();
    }
    String heasarcQuery = "https://heasarc.gsfc.nasa.gov/xamin/CLIServlet?table=abell&fields=name,rich,_count,bmtype,atype";
    
    
    private BufferedReader inp;    
    private BufferedWriter out;
    private String sep = "";
    private String xsep = "";
    int outCount = 0;
    int noZCount = 0;
    int nedQueryCount = 0;
    Map<String, Abell> abell;
    Map<String, Integer> indices = new HashMap<>();
    
    public ClusterParser(String output) throws Exception {
        System.out.println("Doing HEASARC query");
        abell = doHeasarcQuery(); 
        out = new BufferedWriter(new FileWriter("outputs/clusters.json"));
    }
    Map<String,Abell> doHeasarcQuery() throws Exception {
        String url = heasarcQuery;        
        inp = new BufferedReader(
                new InputStreamReader(
                  new URL(url).openStream()));
        inp.readLine(); // Skip header;
        
        String line;
        Map<String,Abell> abell = new HashMap<>();
        
        while ( (line = inp.readLine()) != null) {
            line = line.trim();
            if (line.length() == 0) {
                break;
            }
            String[] fields = line.split("\\|", 5);
            if (fields.length != 5) {
                System.out.println("Invalid line in Abell response:"+line);
                continue;
            }
            int rich      = Integer.parseInt(fields[1].trim());
            int count     = Integer.parseInt(fields[2].trim());
            String bmtype = fields[3].trim();
            if (bmtype.equals("null")) {
                bmtype = null;
            }
            String atype  = fields[4].trim();
            if (atype.equals("null")) {
                atype = null;
            }
            
            Abell clus = new Abell();
            
            clus.count  = count;
            clus.rich   = rich;
            clus.bmtype = bmtype;
            clus.atype  = atype;
            String name = fields[0];
            name = name.trim();
            // Reformat name to what NED recognizes.
            name = name.replaceAll("ABELL(\\d+)(S)?", "Abell $2$1");

            abell.put(name, clus);
        }
        Abell virgo = new Abell();
        // Add in the Virgo cluster.
        virgo.rich = 1;
        virgo.count = 100;
        virgo.bmtype = "III";
        virgo.atype = "Irr";
        abell.put("Virgo Cluster", virgo);
        System.out.println("Number of Abell entries: "+abell.size());
        return abell;
    }
    
    
    void parse() throws Exception {
        ArrayList<String> names = new ArrayList();
        writeHeader(out);
        SortedSet<String> keys = new TreeSet<>(abell.keySet());
        for (String name: keys) {
            name = name.trim();
            // Reformat name to what NED recognizes.
            String upd = name.replaceAll("ABELL(\\d+)(S)?", "Abell $2$1");
            names.add(upd);
            if (names.size() == 100) {
                run(names);
                names.clear();
            }
        }
        
        
        if (names.size() > 0) {
            run(names);
        }
        // Put in local group manually since it isn't found in NED.
        // (We put Virgo is the list of Abell clusters earlier.
        processFields("Local Group", 0,0, 0, null, "Group");
        
        writeFooter(out);
        out.close();
        System.out.println("Number of entries written: "+outCount);
        System.out.println("Missing Z:"+noZCount);
        System.out.println("Number of NED queries:"+nedQueryCount);
    }
    String nedBase   = "http://ned.ipac.caltech.edu/cgi-bin/gmd?uplist=";
    String nedSuffix = "&delimiter=bar&nondb=row_count&nondb=user_name_msg&nondb=user_objname&crosid=objname&position=ra%2Cdec&position=gallon%2Cgallat&enotes=objnote&position=pretype&position=z&position=zflag&gadata=morphol&attdat=attned&gphotoms=q_value&gphotoms=q_unc&gphotoms=ned_value&gphotoms=ned_unc&diamdat=ned_maj_dia&distance=avg&distance=stddev_samp";
    
    void run(List<String> names) throws Exception {
        System.out.println("Running list with:"+names.size()+" "+names.get(0));
        String list = "";
        String prefix = "";
        nedQueryCount += 1;
        for (String name: names) {
            list += prefix+name;
            prefix = "%0D%0A";            
        }
        list=list.replace(" ", "+");
        String nedURL = nedBase + list + nedSuffix;
        inp = new BufferedReader(
                new InputStreamReader(
                  new URL(nedURL).openStream()));
        String line;
        String state = "Start";
        while ((line = inp.readLine()) != null) {
            switch (state) {
                case  "Start":
                    if (line.indexOf("<PRE>") >= 0) {
                        state = "Table";
                    }
                    break;
                case   "Table":
                    if (line.trim().startsWith("<a href")) {
                        outCount += 1;
                        processLine(line);
                    } else if (line.startsWith("</PRE>")) {
                        state = "Done";
                    } 
                    break;
            }
            if (state.equals("Done")) {
                break;
            }
        }
        inp.close();
    }
    
    void processLine(String line) throws Exception  {
        String[] fields = line.split("\\|");
        String name = fields[2].trim();
        String ls = fields[7].trim();
        if (ls.length()  == 0) {
            System.out.println("No l,b for "+name);
            return;
        }
        double l = Double.parseDouble(ls);
        double b = Double.parseDouble(fields[8].trim());
        
        ls = fields[10].trim();
        if (ls.length() == 0) {
            noZCount += 1;
            return;            
        }
        double z = Double.parseDouble(ls);
        String cls  = fields[9].trim();
        String typ  = fields[12].trim();
        String bmt  = null;
        String atyp = null;
        if (typ.length() > 0) {
            String[] types = typ.split(";");
            for (String type: types) {
                type = type.trim();
                if (type.endsWith(" [BM]")) {
                    bmt = type.substring(0,type.length()-5);
                }
                if (type.endsWith(" [A]")) {
                    atyp = type.substring(0, type.length()-4);
                }
            }
        }
        processFields(name, l,b, z, bmt, atyp);
    }
    
    void writeHeader(BufferedWriter out) throws Exception {
        out.write("[\n");        
    }
    void writeFooter(BufferedWriter out) throws Exception {
        out.write("\n]\n");
    }
        
    void processFields(String name, double l, double b, double rs, String bmt, String atyp) throws Exception {

        double d = 300000*rs / 70;
        String ds = String.format("%.2f", d);
        b = Math.toRadians(b);
        l = Math.toRadians(l);
        double x = Math.cos(l)*Math.cos(b)*d;
        double y = Math.sin(l)*Math.cos(b)*d;
        double z = Math.sin(b)*d;
        String xs = String.format("%.2f", x);
        String ys = String.format("%.2f", y);
        String zs = String.format("%.2f", z);
        
        out.write(sep + "  {\n");
        sep = ",\n";
        xsep = "    ";
        
        emit("name", name, true);
        emit("x", xs);
        emit("y", ys);
        emit("z", zs);
        emit("d", ds);
        emit("l", ""+l);
        emit("b", ""+b);
        emit("redshift", ""+rs);
        Abell clus = abell.get(name);
        int rich = -1;
        if (clus != null) {
            if (bmt == null) {
                bmt = clus.bmtype;
            }
            if (atyp == null) {
                atyp = clus.atype;
            }
            rich = clus.rich;
        }
        emit("rich", ""+rich);
        emit("bm", bmt, true);
        emit("ctype", atyp, true);
        out.write("\n  }");
    }
    
    void emit(String fld, String[] fields) throws Exception {
        emit(fld, fields, false);
    }
    
    void emit(String fld, String[] fields, boolean isStr) throws Exception {
        emit(fld, fields[indices.get(fld)], isStr);
    }
    
    void emit(String fld, String val) throws Exception {
        emit(fld, val, false);
    }
    
    void emit(String fld, String val, boolean isStr) throws Exception {
        if (val == null) {
            return;
        }
        fld = fld.trim();
        val = val.trim();
        out.write(xsep+ "\""+fld+"\": ");
        String q = "";
        if (isStr) {
            q = "\"";
        }
        out.write(q+val+q);
        xsep = ",\n    ";        
    }
}
